import librosa
import os

from preprocess import *
import keras
from keras._tf_keras.keras.models import Sequential
from keras._tf_keras.keras.layers import Dense, Dropout, Flatten, Conv2D, MaxPooling2D, LSTM
from keras._tf_keras.keras.utils import to_categorical
import wandb
from wandb.integration.keras.callbacks.tables_builder import WandbEvalCallback as WandbCallback
from wandb.integration.keras.callbacks.metrics_logger import WandbMetricsLogger
import matplotlib.pyplot as plt
import sys
print(sys.version)
print("")
print("**********************************************************************************")
print("Chandra Sen Bhagan. PhD Artificial Intelligence & Sanskrit. Start of program")
print("**********************************************************************************")

wandb.init()
config = wandb.config

config.max_len = 11

config.buckets = 13



#Save data to array file first

save_data_to_array(max_len=config.max_len, n_mfcc=config.buckets)



labels=["bed", "happy", "cat"]
num_classes = 3

# Loading train set and test set
X_train, X_test, y_train, y_test = get_train_test()

# # Feature dimension
channels = 1
config.epochs = 50
config.batch_size = 100




X_train = X_train.reshape(X_train.shape[0], config.buckets, config.max_len,1)

X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len,1)

#plt.imshow(X_train[100, :, :, 0])
#print(y_train[100])

y_train_hot = to_categorical(y_train)
#x_train_hot = to_categorical(X_train)

#X_train = X_train.reshape(X_train.shape[0], config.buckets, config.max_len)
#X_test = X_test.reshape(X_test.shape[0], config.buckets, config.max_len)



model = Sequential()

model.add(Flatten(input_shape=(config.buckets, config.max_len)))

model.add(Dense(num_classes, activation='softmax'))

model.compile(loss="categorical_crossentropy",

                  optimizer="adam",

                  metrics=['accuracy'])
wandb.init()

#model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_test, y_test_hot), callbacks=[WandbCallback(data_type="image", labels=labels)])

model.fit(X_train, y_train_hot, validation_data=(X_test, y_test), callbacks=[WandbMetricsLogger()]) #CSB-(26/01/2025)-> Changed due to possible modification of code

# build model

model = Sequential()

model.add(LSTM(16, input_shape=(config.buckets, config.max_len, channels), activation="sigmoid"))

model.add(Dense(1, activation='sigmoid'))

model.add(Dense(num_classes, activation='softmax'))
model.compile(loss="categorical_crossentropy",
                  optimizer="adam",
                  metrics=['accuracy'])
wandb.init()

#model.fit(X_train, y_train_hot, epochs=config.epochs, validation_data=(X_test, y_test_hot), callbacks=[WandbCallback(data_type="image", labels=labels)])# #CSB-(26/01/2025)-> Changed due to possible modification of code
model.fit(X_train, y_train, validation_data=(X_test, y_test), callbacks=[WandbMetricsLogger()]) #CSB-(26/01/2025)-> Changed due to possible modification of code   
